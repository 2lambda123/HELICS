
Copyright (C) 2017, Battelle Memorial Institute
All rights reserved.

This software was co-developed by Pacific Northwest National Laboratory, operated by the Battelle Memorial Institute; the National Renewable Energy Laboratory, operated by the Alliance for Sustainable Energy, LLC; and the Lawrence Livermore National Laboratory, operated by Lawrence Livermore National Security, LLC.

*/
#ifndef _HELICS_ENDPOINT_H_
#define _HELICS_ENDPOINT_H_
#pragma once

#include "MessageFederate.h"
namespace helics
{
/** class to manage an endpoint */
class Endpoint
{
  private:
    MessageFederate *fed;  //!< the MessageFederate to interact with
    std::string m_name;  //!< the name of the endpoint
    std::string m_type;  //!< the type of an endpoint
    std::string targetDest;  //!< a predefined target destination
    endpoint_id_t id;  //!< the id as generated by the Federate
  public:
    /**constructor to build an endpoint object
    @param[in] mFed  the MessageFederate to use
    @param[in] type a named type associated with the endpoint
    */
    Endpoint (MessageFederate *mFed, std::string name, std::string type = "")
        : fed (mFed), m_name (std::move (name)), m_type (std::move (type))
    {
        id = fed->registerEndpoint (m_name, m_type);
    }
    /** send a data block and length
    @param[in] dest string name of the destination
    @param[in] data pointer to data location
    @param[in] len the length of the data
    */
    void send (const std::string &dest, const char *data, size_t len) const
    {
        fed->sendMessage (id, dest, data_view (data, len));
    }
    /** send a data_view
    @details a data view can convert from many different formats so this function should
    be catching many of the common use cases
    @param[in] dest string name of the destination
    @param[in] data data representation to send
    */
    void send (const std::string &dest, data_view data) const { fed->sendMessage (id, dest, data); }
    /** send a data_view
    @details a data view can convert from many different formats so this function should
    be catching many of the common use cases
    @param[in] dest string name of the destination
    @param[in] data data representation to send
    @param[in] sendTime  the time the message should be sent
    */
    void send (const std::string &dest, data_view data, Time sendTime) const
    {
        fed->sendMessage (id, dest, data, sendTime);
    }
    /** send a data block and length to the target destination
    @param[in] data pointer to data location
    @param[in] len the length of the data
    */
    void send (const char *data, size_t len) const { fed->sendMessage (id, targetDest, data_view (data, len)); }
    /** send a data_view to the target destination
    @details a data view can convert from many different formats so this function should
    be catching many of the common use cases
    @param[in] dest string name of the destination
    @param[in] data data representation to send
    */
    void send (data_view data) const { fed->sendMessage (id, targetDest, data); }
    /** send a data_view to the specified target destination
    @details a data view can convert from many different formats so this function should
    be catching many of the common use cases
    @param[in] data data representation to send
    @param[in] sendTime  the time the message should be sent
    */
    void send (data_view data, Time sendTime) const { fed->sendMessage (id, targetDest, data, sendTime); }
    /** get an available message if there is no message the returned object is empty*/
    Message_view getMessage () const { return fed->getMessage (id); }
    /** check if there is a message available*/
    bool hasMessage () const { return fed->hasMessage (id); }
    /** register a callback for an update notification
    @details the callback is called in the just before the time request function returns
    @param[in] callback a function with signature void( Time time)
    time is the time the value was updated  This callback is a notification callback and doesn't return the value
    */
    void setCallback (std::function<void(endpoint_id_t, Time)> callback) { fed->registerEndpointCallback (id, callback); }
    /** set a target destination for unspecified messages*/
    void setTargetDestination (const std::string &target) { targetDest = target; }
};
}
#endif
